org: kjpersonal

app: test

service: royal-garden-document-service

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    S3_BUCKET_NAME: ${self:custom.s3BucketName}
    CLOUDFRONT_DISTRIBUTION_ID: ${self:custom.cloudFrontDistributionId}
    URL_EXPIRATION_TIME: 3600 # 1 hour in seconds
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::${self:custom.s3BucketName}
            - arn:aws:s3:::${self:custom.s3BucketName}/*
        - Effect: Allow
          Action:
            - cloudfront:CreateInvalidation
          Resource: "*"

custom:
  s3BucketName: ${self:service}-documents-${self:provider.stage}
  cloudFrontDistributionId: "" # Add your CloudFront distribution ID once created
  corsSettings:
    origin: "*" # Update with your frontend domain for production
    headers:
      - Content-Type
      - Authorization
      - X-Api-Key
    allowCredentials: true

functions:
  listFiles:
    handler: src/functions/listFiles.handler
    events:
      - http:
          path: files
          method: get
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArn}

  getFile:
    handler: src/functions/getFile.handler
    events:
      - http:
          path: files/{key+}
          method: get
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArn}

  uploadFile:
    handler: src/functions/uploadFile.handler
    events:
      - http:
          path: files
          method: post
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArn}

  deleteFile:
    handler: src/functions/deleteFile.handler
    events:
      - http:
          path: files/{key+}
          method: delete
          cors: true
          authorizer:
            name: jwtAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArn}

resources:
  Resources:
    DocumentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - ${self:custom.corsSettings.origin}
              MaxAge: 3000

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "OAI for ${self:custom.s3BucketName}"

    DocumentsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref DocumentsBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
              Action: "s3:GetObject"
              Resource:
                !Join ["", ["arn:aws:s3:::", !Ref DocumentsBucket, "/*"]]

    DocumentsDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt DocumentsBucket.DomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity:
                  !Join [
                    "",
                    [
                      "origin-access-identity/cloudfront/",
                      !Ref CloudFrontOriginAccessIdentity,
                    ],
                  ]
          Enabled: true
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            TrustedKeyGroups:
              - !Ref SigningKeyGroup
          PriceClass: PriceClass_100

    SigningPrivateKey:
      Type: AWS::CloudFront::PublicKey
      Properties:
        PublicKeyConfig:
          CallerReference: !Ref AWS::StackName
          Name: !Sub "${self:service}-${self:provider.stage}-signing-key"
          EncodedKey: !Ref CloudFrontPublicKey # You'll need to provide this parameter

    SigningKeyGroup:
      Type: AWS::CloudFront::KeyGroup
      Properties:
        KeyGroupConfig:
          Items:
            - !Ref SigningPrivateKey
          Name: !Sub "${self:service}-${self:provider.stage}-signing-key-group"

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin
